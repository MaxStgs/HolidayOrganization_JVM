/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CarDetails;
import io.swagger.model.ListOfCars;
import io.swagger.model.PostCarDetails;
import io.swagger.model.PutCarDetails;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-11-20T18:24:21.559Z[GMT]")

@Api(value = "cars", description = "the cars API")
public interface CarsApi {

    @ApiOperation(value = "", nickname = "carsCarIdGet", notes = "Read car by ID", response = CarDetails.class, tags={ "Cars", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good read car by ID", response = CarDetails.class),
        @ApiResponse(code = 404, message = "Bad read car, not found ID"),
        @ApiResponse(code = 500, message = "Bad read car by ID") })
    @RequestMapping(value = "/cars/{carId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CarDetails> carsCarIdGet(@ApiParam(value = "carId",required=true) @PathVariable("carId") Integer carId);


    @ApiOperation(value = "", nickname = "carsCarIdPut", notes = "Modify car by ID", tags={ "Cars", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good modify car by ID"),
        @ApiResponse(code = 404, message = "Bad modify car, not found ID"),
        @ApiResponse(code = 500, message = "Bad modify car by ID") })
    @RequestMapping(value = "/cars/{carId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> carsCarIdPut(@ApiParam(value = "carId",required=true) @PathVariable("carId") Integer carId,@ApiParam(value = ""  )  @Valid @RequestBody PutCarDetails body);


    @ApiOperation(value = "", nickname = "carsGet", notes = "Read cars", response = ListOfCars.class, tags={ "Cars", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good read cars", response = ListOfCars.class),
        @ApiResponse(code = 500, message = "Bad read cars") })
    @RequestMapping(value = "/cars",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListOfCars> carsGet();


    @ApiOperation(value = "", nickname = "carsPost", notes = "Add car", tags={ "Cars", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good add car"),
        @ApiResponse(code = 500, message = "Bad add car") })
    @RequestMapping(value = "/cars",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> carsPost(@ApiParam(value = ""  )  @Valid @RequestBody PostCarDetails body);

}
