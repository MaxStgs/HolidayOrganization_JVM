/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ListOfSubtasks;
import io.swagger.model.ListOfTasks;
import io.swagger.model.PostTaskDetails;
import io.swagger.model.PutTaskDetails;
import io.swagger.model.SubtaskDetails;
import io.swagger.model.TaskDetails;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-11-20T18:24:21.559Z[GMT]")

@Api(value = "tasks", description = "the tasks API")
public interface TasksApi {

    @ApiOperation(value = "", nickname = "tasksGet", notes = "Read tasks", response = ListOfTasks.class, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good read tasks", response = ListOfTasks.class),
        @ApiResponse(code = 401, message = ""),
        @ApiResponse(code = 500, message = "Bad read tasks") })
    @RequestMapping(value = "/tasks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListOfTasks> tasksGet();


    @ApiOperation(value = "", nickname = "tasksPost", notes = "Add task", tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good add task"),
        @ApiResponse(code = 500, message = "Bad add task") })
    @RequestMapping(value = "/tasks",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> tasksPost(@ApiParam(value = ""  )  @Valid @RequestBody PostTaskDetails body);


    @ApiOperation(value = "", nickname = "tasksTaskIdGet", notes = "Read task by ID", response = TaskDetails.class, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good read task by ID", response = TaskDetails.class),
        @ApiResponse(code = 404, message = "Bad read task, not found ID"),
        @ApiResponse(code = 500, message = "Bad read task by ID") })
    @RequestMapping(value = "/tasks/{taskId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TaskDetails> tasksTaskIdGet(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") Integer taskId);


    @ApiOperation(value = "", nickname = "tasksTaskIdPut", notes = "Modify task by ID", tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good modify task by ID"),
        @ApiResponse(code = 404, message = "Bad modify task, not found ID"),
        @ApiResponse(code = 500, message = "Bad modify task by iD") })
    @RequestMapping(value = "/tasks/{taskId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> tasksTaskIdPut(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") Integer taskId,@ApiParam(value = ""  )  @Valid @RequestBody PutTaskDetails body);


    @ApiOperation(value = "", nickname = "tasksTaskIdSubtaskIdGet", notes = "Read subtask by task ID and subtask ID", response = SubtaskDetails.class, tags={ "Subtasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good read subtask by task id ans subtask ID", response = SubtaskDetails.class),
        @ApiResponse(code = 500, message = "Bad read subtyask by task ID and subtask ID") })
    @RequestMapping(value = "/tasks/{taskId}/{subtaskId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SubtaskDetails> tasksTaskIdSubtaskIdGet(@ApiParam(value = "The Task Id",required=true) @PathVariable("taskId") Integer taskId,@ApiParam(value = "The Subtask Id",required=true) @PathVariable("subtaskId") Integer subtaskId);


    @ApiOperation(value = "", nickname = "tasksTaskIdSubtasksGet", notes = "Read subtasks by task ID", response = ListOfSubtasks.class, tags={ "Subtasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good read subtasks by task ID", response = ListOfSubtasks.class),
        @ApiResponse(code = 404, message = "Bad read subtasks, not found task ID"),
        @ApiResponse(code = 500, message = "Bad reading subtasks by task ID") })
    @RequestMapping(value = "/tasks/{taskId}/subtasks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListOfSubtasks> tasksTaskIdSubtasksGet(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") Integer taskId);

}
