/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ListOfOils;
import io.swagger.model.OilDetails;
import io.swagger.model.PostOilDetails;
import io.swagger.model.PutOilDetails;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-11-20T18:24:21.559Z[GMT]")

@Api(value = "oils", description = "the oils API")
public interface OilsApi {

    @ApiOperation(value = "", nickname = "oilsGet", notes = "Read oils", response = ListOfOils.class, tags={ "Oils", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good read oils", response = ListOfOils.class) })
    @RequestMapping(value = "/oils",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListOfOils> oilsGet();


    @ApiOperation(value = "", nickname = "oilsOilIdDelete", notes = "Delete oil by ID", tags={ "Oils", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Bad delete oil by ID"),
        @ApiResponse(code = 404, message = "Bad delete oil, not found ID"),
        @ApiResponse(code = 500, message = "Bad delete oil by ID") })
    @RequestMapping(value = "/oils/{oilId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> oilsOilIdDelete(@ApiParam(value = "oilId",required=true) @PathVariable("oilId") Integer oilId);


    @ApiOperation(value = "", nickname = "oilsOilIdGet", notes = "Read oil by ID", response = OilDetails.class, tags={ "Oils", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good read oil by ID", response = OilDetails.class),
        @ApiResponse(code = 404, message = "Bad read oil, not found ID"),
        @ApiResponse(code = 500, message = "Bad read oil by ID") })
    @RequestMapping(value = "/oils/{oilId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<OilDetails> oilsOilIdGet(@ApiParam(value = "oilId",required=true) @PathVariable("oilId") Integer oilId);


    @ApiOperation(value = "", nickname = "oilsOilIdPut", notes = "Modify oil by ID", tags={ "Oils", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good modify oil by ID"),
        @ApiResponse(code = 404, message = "Bad modify oil, not found ID"),
        @ApiResponse(code = 500, message = "Bad modify oil by ID") })
    @RequestMapping(value = "/oils/{oilId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> oilsOilIdPut(@ApiParam(value = "oilId",required=true) @PathVariable("oilId") Integer oilId,@ApiParam(value = ""  )  @Valid @RequestBody PutOilDetails body);


    @ApiOperation(value = "", nickname = "oilsPost", notes = "Add oil", tags={ "Oils", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Good add oil"),
        @ApiResponse(code = 500, message = "Bad add oil") })
    @RequestMapping(value = "/oils",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> oilsPost(@ApiParam(value = ""  )  @Valid @RequestBody PostOilDetails body);

}
